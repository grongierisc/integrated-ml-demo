---
swagger: "2.0"
info:
  description: "Rest API for the Integrated ML Demo"
  version: "0.2"
  title: "InterSystems IRIS REST API for Integrated ML Demo"
  contact:
    email: "theophile.thierry@intersystems.com"
  license:
    name: " 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:52777"
basePath: "/api/integratedML"
schemes:
- "http"
- "https"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /passengers:
    get:
      summary: "Get passengers with pagination and search by name possible"
      description: "Retreive the Passengers from the current page with specific page\
        \ length. Search by name possible too."
      operationId: "get_all_passengers"
      parameters:
      - name: "currPage"
        in: "query"
        description: "The current page at which the client is"
        required: false
        type: "number"
      - name: "pageSize"
        in: "query"
        description: "The number of passengers per page"
        required: false
        type: "number"
      - name: "name"
        in: "query"
        description: "Search passenger by name"
        required: false
        type: "string"
      responses:
        "200":
          description: "(Expected Result)"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/passenger"
        default:
          description: "(Unexpected Error)"
      x-ISC_ServiceMethod: "getAllPassengers"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
    post:
      summary: "Create a passenger"
      description: "Create a new passenger to put in the table"
      operationId: "create_passenger"
      parameters:
      - in: "body"
        name: "payloadBody"
        description: "Request body contents"
        required: false
        schema:
          $ref: "#/definitions/passenger"
      responses:
        "200":
          description: "(Expected Result)"
          schema:
            type: "object"
            properties:
              passengerId:
                type: "integer"
        "400":
          description: "(Bad Request)"
        default:
          description: "(Unexpected Error)"
      x-ISC_ServiceMethod: "createPassenger"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
  /passengers/{id}:
    get:
      summary: "Get passenger n째{id} info"
      description: "Return the saved informations of passenger n째{id}"
      operationId: "get_passenger"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
      responses:
        "200":
          description: "(Expected Result)"
          schema:
            $ref: "#/definitions/passenger"
        "204":
          description: "(Not Found)"
        default:
          description: "(Unexpected Error)"
      x-ISC_ServiceMethod: "getPassenger"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
    put:
      summary: "Update passenger {id} info"
      description: "Update already existing passenger {id} with information in the\
        \ payload"
      operationId: "update_passenger"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
      - in: "body"
        name: "payloadBody"
        description: "Request body contents"
        required: false
        schema:
          $ref: "#/definitions/passenger"
      responses:
        "200":
          description: "(Expected Result)"
        "204":
          description: "(Not Found)"
        "400":
          description: "(Bad Request)"
        default:
          description: "(Unexpected Error)"
      x-ISC_ServiceMethod: "updatePassenger"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
    delete:
      summary: "Delete passenger {id}"
      description: "Delete existing passenger with {id}"
      operationId: "delete_passenger"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
      responses:
        "200":
          description: "(Expected Result)"
        "204":
          description: "(Not Found)"
        default:
          description: "(Unexpected Error)"
      x-ISC_ServiceMethod: "deletePassenger"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
  /patients:
    get:
      summary: "Get patients with pagination and search by name possible"
      description: "Retreive the total number of Patients THEN the Patients from currPage\\\
        *(pageSize-1) to currPage\\*pageSize. Search by name possible too."
      operationId: "get_all_patients"
      parameters:
      - name: "currPage"
        in: "query"
        description: "The current page at which the client is"
        required: false
        type: "number"
      - name: "pageSize"
        in: "query"
        description: "The number of patients per page"
        required: false
        type: "number"
      - name: "id"
        in: "query"
        description: "Search patient by id"
        required: false
        type: "string"
      responses:
        "200":
          description: "(Expected Result)"
          schema:
            type: "object"
            properties:
              total:
                type: "number"
              patients:
                type: "array"
                items:
                  $ref: "#/definitions/patient"
        default:
          description: "(Unexpected Error)"
      x-ISC_ServiceMethod: "getAllPatients"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
    post:
      summary: "Create a patient"
      description: "Create a new patient to put in the table"
      operationId: "create_patient"
      parameters:
      - in: "body"
        name: "payloadBody"
        description: "Request body contents"
        required: false
        schema:
          $ref: "#/definitions/patient"
      responses:
        "200":
          description: "(Expected Result)"
          schema:
            type: "object"
            properties:
              patientId:
                type: "integer"
        "400":
          description: "(Bad Request)"
        default:
          description: "(Unexpected Error)"
      x-ISC_ServiceMethod: "createPatient"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
  /patients/{id}:
    get:
      summary: "Get patient n째{id} info"
      description: "Return the saved informations of patient n째{id}"
      operationId: "get_patient"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
      responses:
        "200":
          description: "(Expected Result)"
          schema:
            $ref: "#/definitions/patient"
        "204":
          description: "(Not Found)"
        default:
          description: "(Unexpected Error)"
      x-ISC_ServiceMethod: "getPatient"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
    put:
      summary: "Update patient {id} info"
      description: "Update already existing patient {id} with information in the payload"
      operationId: "update_patient"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
      - in: "body"
        name: "payloadBody"
        description: "Request body contents"
        required: false
        schema:
          $ref: "#/definitions/patient"
      responses:
        "200":
          description: "(Expected Result)"
        "204":
          description: "(Not Found)"
        "400":
          description: "(Bad Request)"
        default:
          description: "(Unexpected Error)"
      x-ISC_ServiceMethod: "updatePatient"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
    delete:
      summary: "Delete patient {id}"
      description: "Delete existing patient with {id}"
      operationId: "delete_patient"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
      responses:
        "200":
          description: "(Expected Result)"
        "204":
          description: "(Not Found)"
        default:
          description: "(Unexpected Error)"
      x-ISC_ServiceMethod: "deletePatient"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
  /ml/tablesize:
    get:
      summary: "Get nb of objects in table"
      description: "Retreive the total number of objects in a table"
      operationId: "get_table_size"
      parameters:
      - name: "table"
        in: "query"
        description: "The table we need the max size from"
        required: false
        type: "string"
      responses:
        "200":
          description: "(Expected Result)"
          schema:
            type: "object"
            properties:
              total:
                type: "number"
        "204":
          description: "(Not Found)"
        default:
          description: "(Unexpected Error)"
      x-ISC_ServiceMethod: "getTableSize"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
  /ml/models:
    get:
      summary: "Get all models"
      description: "Retreive all created models"
      operationId: "get_all_models"
      parameters: []
      responses:
        "200":
          description: "(Expected Result)"
          schema:
            type: "object"
            properties:
              models:
                type: "array"
                items:
                  $ref: "#/definitions/mlModel"
              query:
                type: "string"
        default:
          description: "(Unexpected Error)"
      x-ISC_ServiceMethod: "getAllModels"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
    post:
      summary: "Create a Model"
      description: "Create a model modelName that predicts predictValue from the table\
        \ tableName using the variables in the array withVariables"
      operationId: "create_model"
      parameters:
      - in: "body"
        name: "createInfo"
        description: "Information about model creation"
        required: true
        schema:
          type: "object"
          properties:
            modelName:
              type: "string"
            predictValue:
              type: "string"
            fromTable:
              type: "string"
            withVariables:
              type: "array"
              items:
                type: "string"
      responses:
        "200":
          description: "(Expected Result)"
          schema:
            type: "object"
            properties:
              query:
                type: "string"
        "400":
          description: "(Bad Request)"
        default:
          description: "(Unexpected Error)"
      x-ISC_ServiceMethod: "createModel"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
    delete:
      summary: "Delete a model"
      description: "Delete a model (along with all of its trained runs)"
      operationId: "delete_model"
      parameters:
      - name: "modelName"
        in: "query"
        description: "Name of the model to be deleted"
        required: true
        type: "string"
      responses:
        "200":
          description: "(Expected Result)"
          schema:
            type: "object"
            properties:
              query:
                type: "string"
        "204":
          description: "(Not Found)"
        default:
          description: "(Unexpected Error)"
      x-ISC_ServiceMethod: "deleteModel"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
  /ml/models/purge:
    delete:
      summary: "Purge runs from model"
      description: "Purge runs from a model"
      operationId: "purge_model"
      parameters:
      - name: "modelName"
        in: "query"
        required: true
        type: "string"
      responses:
        "200":
          description: "(Expected Result)"
          schema:
            type: "object"
            properties:
              query:
                type: "string"
        "204":
          description: "(Not Found)"
        default:
          description: "(Unexpected Error)"
      x-ISC_ServiceMethod: "purgeModel"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
  /ml/trainings:
    get:
      summary: "Get all training runs"
      description: "Get all training runs"
      operationId: "get_training_runs"
      parameters: []
      responses:
        "200":
          description: "(Expected Result)"
          schema:
            type: "object"
            properties:
              trainingRuns:
                type: "array"
                items:
                  $ref: "#/definitions/mlTrainingRun"
              query:
                type: "string"
        default:
          description: "(Unexpected Error)"
      x-ISC_ServiceMethod: "getTrainingRuns"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
    post:
      summary: "Train a Model"
      description: "Train the Model named modelName and gives the name trainingName\
        \ to the training run"
      operationId: "train_model"
      parameters:
      - in: "body"
        name: "trainingInfo"
        description: "Training informations"
        required: true
        schema:
          type: "object"
          properties:
            modelName:
              type: "string"
            trainingName:
              type: "string"
            fromTable:
              type: "string"
      responses:
        "200":
          description: "(Expected Result)"
          schema:
            type: "object"
            properties:
              query:
                type: "string"
        "400":
          description: "(Bad Request)"
        default:
          description: "(Unexpected Error)"
      x-ISC_ServiceMethod: "trainModel"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
  /ml/trainings/states:
    get:
      summary: "Get state of training run"
      description: "Get the state of a speecific training run"
      operationId: "get_state_training_run"
      parameters:
      - name: "modelName"
        in: "query"
        description: "Name of the model"
        required: false
        type: "string"
      - name: "trainingName"
        in: "query"
        description: "Name of the training run"
        required: false
        type: "string"
      responses:
        "200":
          description: "(Expected Result)"
          schema:
            type: "object"
            properties:
              state:
                type: "string"
              query:
                type: "string"
        "204":
          description: "(Not Found)"
        default:
          description: "(Unexpected Error)"
      x-ISC_ServiceMethod: "getStateTrainingRun"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
  /ml/trainings/configurations:
    get:
      summary: "Get configurations"
      description: "Get ml configurations"
      operationId: "get_all_configurations"
      parameters: []
      responses:
        "200":
          description: "(Expected Result)"
          schema:
            type: "object"
            properties:
              defaultConfigName:
                type: "string"
              configs:
                type: "array"
                items:
                  type: "string"
        "400":
          description: "(Bad Request)"
      x-ISC_ServiceMetho: "getAllConfigurations"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
    put:
      summary: "Update configuration"
      description: "Update ml configuration"
      operationId: "change_configuration"
      parameters:
      - in: "body"
        name: "configName"
        description: "Configuration name to use"
        required: true
        schema:
          type: "object"
          properties:
            configName:
              type: "string"
      responses:
        "200":
          description: "(Expected Result)"
        "204":
          description: "(Not Found)"
        "400":
          description: "(Bad Request)"
        default:
          description: "(Unexpected Error)"
      x-ISC_ServiceMethod: "changeConfiguration"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
  /ml/trainings/configurations/datarobot:
    post:
      summary: "Create DataRobot configuration"
      description: "Create a DataRobot configuration"
      operationId: "create_dr_configuration"
      parameters:
      - in: "body"
        name: "payload"
        description: "URL to use"
        required: true
        schema:
          type: "object"
          properties:
            url:
              type: "string"
            apiToken:
              type: "string"
      responses:
        "200":
          description: "(Expected Result)"
          schema:
            type: "object"
            properties:
              query:
                type: "string"
        "400":
          description: "(Bad Request)"
        default:
          description: "(Unexpected Error)"
      x-ISC_ServiceMethod: "createDRConfiguration"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
    put:
      summary: "Alter DataRobot configuration"
      description: "Alter DataRobot ml configuration"
      operationId: "alter_dr_configuration"
      parameters:
      - in: "body"
        name: "payload"
        description: "URL to use"
        required: true
        schema:
          type: "object"
          properties:
            url:
              type: "string"
            apiToken:
              type: "string"
      responses:
        "200":
          description: "(Expected Result)"
          schema:
            type: "object"
            properties:
              query:
                type: "string"
        "400":
          description: "(Bad Request)"
        default:
          description: "(Unexpected Error)"
      x-ISC_ServiceMethod: "alterDRConfiguration"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
  /ml/trainings/logs:
    get:
      summary: "Get log of training run"
      description: "Get the log of a speecific training run"
      operationId: "get_log_training_run"
      parameters:
      - name: "trainingName"
        in: "query"
        description: "Name of the training run"
        required: false
        type: "string"
      responses:
        "200":
          description: "(Expected Result)"
          schema:
            type: "object"
            properties:
              log:
                type: "string"
              query:
                type: "string"
        "204":
          description: "(Not Found)"
        default:
          description: "(Unexpected Error)"
      x-ISC_ServiceMethod: "getLogTrainingRun"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
  /ml/validations:
    get:
      summary: "Get all validation runs"
      description: "Get all validation runs"
      operationId: "get_validation_runs"
      parameters: []
      responses:
        "200":
          description: "(Expected Result)"
          schema:
            type: "object"
            properties:
              trainingRuns:
                type: "array"
                items:
                  $ref: "#/definitions/mlValidationRun"
              query:
                type: "string"
        default:
          description: "(Unexpected Error)"
      x-ISC_ServiceMethod: "getValidationRuns"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
    post:
      summary: "Validate a Model"
      description: "Validate the Model named modelName using trainedModelName trained\
        \ model on the fromTable table and gives the name validationName to the validation\
        \ run"
      operationId: "validate_model"
      parameters:
      - in: "body"
        name: "validationInfo"
        description: "Validation informations"
        required: true
        schema:
          type: "object"
          properties:
            modelName:
              type: "string"
            validationName:
              type: "string"
            trainedModelName:
              type: "string"
            fromTable:
              type: "string"
      responses:
        "200":
          description: "(Expected Result)"
          schema:
            type: "object"
            properties:
              query:
                type: "string"
        "400":
          description: "(Bad Request)"
        default:
          description: "(Unexpected Error)"
      x-ISC_ServiceMethod: "validateModel"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
  /ml/validations/metrics:
    get:
      summary: "Get metrics from validation run"
      description: "Get all metrics for given validation run"
      operationId: "get_metrics"
      parameters:
      - name: "modelName"
        in: "query"
        description: "The model from which we want to select a validation run"
        required: false
        type: "string"
      - name: "validationName"
        in: "query"
        description: "The validation run we want to retreive the metrics from"
        required: false
        type: "string"
      responses:
        "200":
          description: "(Expected Result)"
          schema:
            type: "object"
            properties:
              metrics:
                $ref: "#/definitions/mlValidationMetrics"
              query:
                type: "string"
        "204":
          description: "(Not Found)"
        default:
          description: "(Unexpected Error)"
      x-ISC_ServiceMethod: "getMetrics"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
  /ml/predictions/models:
    get:
      summary: "Get all trained models"
      description: "Get all trained models"
      operationId: "get_trained_models"
      parameters: []
      responses:
        "200":
          description: "(Expected Result)"
          schema:
            type: "object"
            properties:
              models:
                type: "array"
                items:
                  $ref: "#/definitions/mlTrainedModel"
              query:
                type: "string"
        default:
          description: "(Unexpected Error)"
      x-ISC_ServiceMethod: "getTrainedModels"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
  /ml/predictions:
    get:
      summary: "Predict with a model and an id"
      description: "Predict with a certain model, a certain trained model and a certain\
        \ id from a certain table"
      operationId: "predict"
      parameters:
      - name: "model"
        in: "query"
        description: "Model to predict with"
        required: true
        type: "string"
      - name: "trainedModel"
        in: "query"
        description: "Trained Model to predict with"
        required: true
        type: "string"
      - name: "id"
        in: "query"
        description: "ID to predict with"
        required: true
        type: "string"
      - name: "fromTable"
        in: "query"
        description: "Table to predict from"
        required: true
        type: "string"
      responses:
        "200":
          description: "(Expected Result)"
          schema:
            type: "object"
            properties:
              predictedValue:
                type: "string"
              query:
                type: "string"
        "400":
          description: "(Bad Request)"
        default:
          description: "(Unexpected Error)"
      x-ISC_ServiceMethod: "predict"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
  /ml/predictions/probabilities:
    get:
      summary: "Probabilities of having labelValue value predicted"
      description: "Gives the probability of being predicted the labelValue with a\
        \ certain model, a certain trained model and a certain id from a certain table"
      operationId: "probability"
      parameters:
      - name: "model"
        in: "query"
        description: "Model to predict with"
        required: true
        type: "string"
      - name: "trainedModel"
        in: "query"
        description: "Trained Model to predict with"
        required: true
        type: "string"
      - name: "labelValue"
        in: "query"
        description: "Label of the value for probability"
        required: true
        type: "string"
      - name: "id"
        in: "query"
        description: "ID to predict with"
        required: true
        type: "string"
      - name: "fromTable"
        in: "query"
        description: "Table to predict from"
        required: true
        type: "string"
      responses:
        "200":
          description: "(Expected Result)"
          schema:
            type: "object"
            properties:
              probability:
                type: "string"
              query:
                type: "string"
        "400":
          description: "(Bad Request)"
        default:
          description: "(Unexpected Error)"
      x-ISC_ServiceMethod: "probability"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
definitions:
  passenger:
    type: "object"
    properties:
      passengerId:
        type: "integer"
      survived:
        type: "integer"
      class:
        type: "integer"
      name:
        type: "string"
      sex:
        type: "string"
      age:
        type: "number"
      sibSp:
        type: "integer"
      parCh:
        type: "integer"
      ticket:
        type: "string"
      fare:
        type: "number"
      cabin:
        type: "string"
      embarked:
        type: "string"
    example:
      fare: 7.061401241503109105224211816675961017608642578125
      ticket: "ticket"
      sex: "sex"
      name: "name"
      passengerId: 0
      cabin: "cabin"
      embarked: "embarked"
      survived: 6
      sibSp: 5
      class: 1
      age: 5.962133916683182377482808078639209270477294921875
      parCh: 2
  patient:
    type: "object"
    properties:
      patientId:
        type: "number"
      gender:
        type: "string"
      scheduledDay:
        type: "string"
      scheduledHour:
        type: "string"
      appointmentDay:
        type: "string"
      age:
        type: "number"
      neighborhood:
        type: "string"
      scholarship:
        type: "number"
      hypertension:
        type: "number"
      diabetes:
        type: "number"
      alcoholism:
        type: "number"
      handicap:
        type: "number"
      smsReceived:
        type: "number"
      noShow:
        type: "string"
    example:
      gender: "gender"
      scheduledDay: "scheduledDay"
      patientId: 0.80082819046101150206595775671303272247314453125
      scheduledHour: "scheduledHour"
      handicap: 7.061401241503109105224211816675961017608642578125
      noShow: "noShow"
      appointmentDay: "appointmentDay"
      alcoholism: 2.3021358869347654518833223846741020679473876953125
      scholarship: 1.46581298050294517310021547018550336360931396484375
      neighborhood: "neighborhood"
      hypertension: 5.962133916683182377482808078639209270477294921875
      diabetes: 5.63737665663332876420099637471139430999755859375
      age: 6.02745618307040320615897144307382404804229736328125
      smsReceived: 9.301444243932575517419536481611430644989013671875
  mlModel:
    type: "object"
    properties:
      modelName:
        type: "string"
      description:
        type: "string"
      predictingColumnName:
        type: "string"
      predictingColumntype:
        type: "string"
      withColumns:
        type: "string"
      createTimestamp:
        type: "string"
      defaultTrainedModelName:
        type: "string"
      defaultSettings:
        type: "string"
      defaultTrainingQuery:
        type: "string"
  mlTrainingRun:
    type: "object"
    properties:
      modelName:
        type: "string"
      trainingRunName:
        type: "string"
      provider:
        type: "string"
      startTimestamp:
        type: "string"
      completedTimestamp:
        type: "string"
      trainingDuration:
        type: "string"
      runStatus:
        type: "string"
      statusCode:
        type: "string"
      log:
        type: "string"
      settings:
        type: "string"
      mlConfigurationName:
        type: "string"
      trainingRunQuery:
        type: "string"
  mlTrainedModel:
    type: "object"
    properties:
      modelName:
        type: "string"
      trainedModelName:
        type: "string"
      provider:
        type: "string"
      trainedTimestamp:
        type: "string"
      modelType:
        type: "string"
      modelInfo:
        type: "string"
  mlValidationRun:
    type: "object"
    properties:
      modelName:
        type: "string"
      trainedModelName:
        type: "string"
      validationRunName:
        type: "string"
      startTimestamp:
        type: "string"
      completedTimestamp:
        type: "string"
      validationDuration:
        type: "string"
      runStatus:
        type: "string"
      statusCode:
        type: "string"
      log:
        type: "string"
      settings:
        type: "string"
      validationRunQuery:
        type: "string"
  mlValidationMetrics:
    type: "array"
    items:
      type: "string"
